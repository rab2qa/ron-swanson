{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","quotes","this","getQuote","filter","_this2","axios","get","concat","then","res","data","setState","quote","newRating","self","userRating","post","quoteID","id","rating","response","aggregateRating","_this3","react_default","a","createElement","className","src","window","location","origin","alt","onClick","map","key","value","react_stars_default","count","onChange","updateRating","size","half","color1","color2","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSA0FeA,oNAhFXC,MAAQ,CACJC,OAAQ,uFAIRC,KAAKC,4CAGAC,GAAQ,IAAAC,EAAAH,KACbI,IAAMC,IAAN,GAAAC,OAbU,yBAaV,cAAAA,OAZU,EAYV,YAAAA,OAAuDJ,IAClDK,KAAK,SAAAC,GACEA,EAAIC,MACJN,EAAKO,SAAS,CAAEX,OAAQS,EAAIC,8CAK/BE,EAAOC,GAChB,IAAMC,EAAOb,KACbW,EAAMG,WAAaF,EACnBR,IAAMW,KAAN,GAAAT,OAxBU,yBAwBV,aAAoC,CAChCU,QAASL,EAAMM,GACfC,OAAQN,IAEPL,KAAK,SAAUY,GACRA,EAASV,OACTE,EAAMS,gBAAkBD,EAASV,KACjCI,EAAKH,SAAS,CAAEX,OAAQc,EAAKf,MAAMC,6CAK1C,IAAAsB,EAAArB,KACL,OACIsB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,IAAKC,OAAOC,SAASC,OAAS,mBAAoBC,IAAI,gBAClFR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeM,QAAS,kBAAMV,EAAKpB,aAArD,cAEJqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQO,QAAS,kBAAMV,EAAKpB,SAAS,WAArC,YACAqB,EAAAC,EAAAC,cAAA,UAAQO,QAAS,kBAAMV,EAAKpB,SAAS,YAArC,gBACAqB,EAAAC,EAAAC,cAAA,UAAQO,QAAS,kBAAMV,EAAKpB,SAAS,WAArC,aAEJqB,EAAAC,EAAAC,cAAA,UACKxB,KAAKF,MAAMC,OAAOiC,IAAI,SAAArB,GAAK,OACxBW,EAAAC,EAAAC,cAAA,MAAIS,IAAKtB,EAAMM,IACXK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,IACMd,EAAMuB,MADZ,KAGAZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CACIa,MAAO,EACPF,MAAOvB,EAAMG,YAAc,EAC3BuB,SAAU,SAACzB,GAAD,OAAeS,EAAKiB,aAAa3B,EAAOC,IAClD2B,KAAM,GACNC,MAAM,EACNC,OAAQ,UACRC,OAAQ,aAGd/B,EAAMS,iBACJE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,KACAH,EAAAC,EAAAC,cAAA,YAAOb,EAAMS,iBAAmB,aAChCE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,mBArElBkB,cCGEC,QACW,cAA7BjB,OAAOC,SAASiB,UAEe,UAA7BlB,OAAOC,SAASiB,UAEhBlB,OAAOC,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.645bc7e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactStars from 'react-stars'\n\nimport './App.css';\n\nconst serverURL = 'http://localhost:3001/';\nconst numQuotes = 1;\n\nclass App extends Component {\n    state = {\n        quotes: []\n    }\n\n    componentDidMount() {\n        this.getQuote();\n     }\n\n    getQuote(filter) {\n        axios.get(`${serverURL}v2/quotes/${numQuotes}?filter=${filter}`)\n            .then(res => {\n                if (res.data) {\n                    this.setState({ quotes: res.data });\n                }\n            });\n    }\n\n    updateRating(quote, newRating) {\n        const self = this;\n        quote.userRating = newRating;\n        axios.post(`${serverURL}v2/rating`, {\n            quoteID: quote.id,\n            rating: newRating\n        })\n            .then(function (response) {\n                if (response.data) {\n                    quote.aggregateRating = response.data;\n                    self.setState({ quotes: self.state.quotes });\n                }\n            })\n    }\n\n    render() {\n        return (\n            <div>\n            <img className=\"full-width\" src={window.location.origin + '/ron-swanson.jpg'} alt=\"Ron Swanson\"/>\n            <div className=\"panel center\">\n                <h1>Quote of the Day</h1>\n                <div>\n                    <button className=\"large-button\" onClick={() => this.getQuote()}>New Quote</button>\n                </div>\n                <div>\n                    <button onClick={() => this.getQuote('small')}>Beginner</button>\n                    <button onClick={() => this.getQuote('medium')}>Intermediate</button>\n                    <button onClick={() => this.getQuote('large')}>Advanced</button>\n                </div>\n                <ul>\n                    {this.state.quotes.map(quote =>\n                        <li key={quote.id}>\n                            <div className=\"quote\">\n                                \"{quote.value}\"\n                            </div>\n                            <div className=\"inline\">\n                                <ReactStars\n                                    count={5}\n                                    value={quote.userRating || 0}\n                                    onChange={(newRating) => this.updateRating(quote, newRating)}\n                                    size={48}\n                                    half={false}\n                                    color1={'#8e8d8a'}\n                                    color2={'#e85a4f'}\n                                />\n                            </div>\n                            { quote.aggregateRating &&\n                                <div className=\"highlight\">\n                                    <span>Average User Rating </span>\n                                    <span className=\"highlight2\">(</span>\n                                    <span>{quote.aggregateRating || 'not rated'}</span>\n                                    <span className=\"highlight2\">)</span>\n                                </div>\n                            }\n                        </li>\n                    )}\n                </ul>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}